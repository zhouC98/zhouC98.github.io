<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Debounce, throttle原理及实现</title>
    <link href="/2020/12/04/debouce/"/>
    <url>/2020/12/04/debouce/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param </span>fn &#123;Function&#125;   实际要执行的函数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param </span>delay &#123;Number&#125;  延迟时间，也就是阈值，单位是毫秒（ms）</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return <span class="hljs-type">&#123;Function&#125;</span>     </span>返回一个“去弹跳”了的函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> timer<br>  <span class="hljs-comment">// 返回一个函数，这个函数会在一个时间区间结束后的 delay 毫秒时执行 fn 函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 保存函数调用时的上下文和参数，传递给 fn</span><br>    <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span><br>    <span class="hljs-comment">// 每次这个返回的函数被调用，就清除定时器，以保证不执行 fn    clearTimeout(timer)</span><br>    <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>    <span class="hljs-comment">// 当返回的函数被最后一次调用后（也就是用户停止了某个连续的操作），</span><br>    <span class="hljs-comment">// 再过 delay 毫秒就执行 fn</span><br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      fn.apply(context, args)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>debounce 返回了一个闭包，这个闭包依然会被连续频繁地调用，但是在闭包内部，却限制了原始函数 fn 的执行，强制 fn 只在连续操作停止后只执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 节流throttle代码（定时器）：</span><br><span class="hljs-keyword">var</span> throttle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">func, delay</span>) </span>&#123;            <br>    <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;            <br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;                <br>        <span class="hljs-keyword">var</span> context = <span class="hljs-built_in">this</span>;               <br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;                <br>        <span class="hljs-keyword">if</span> (!timer) &#123;                    <br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;                        <br>                func.apply(context, args);                        <br>                timer = <span class="hljs-literal">null</span>;                    <br>            &#125;, delay);                <br>        &#125;            <br>    &#125;        <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>animation和transition的区别</title>
    <link href="/2020/12/03/animation/"/>
    <url>/2020/12/03/animation/</url>
    
    <content type="html"><![CDATA[<p>animation 可以用 name 设置动画的名称，用 duration 设置动画完成的周期，用 timing-function 设置动画的速度曲线，delay 设置动画什么时候开始，iteration-count 设置动画播放的次数，direction 规定下一个周期是否逆向的播放，play-state 动画是否正在进行或者暂停，fill-mode 设置动画停了之后位置什么状态<br>　　transition 用 property 去设置过渡效果的属性名称，duration 设置过渡效果的周期，timing-function 规定速度效果的速度曲线，delay 设定过渡效果什么时候开始；<br>　　<br>　　区别：<br>　　　　1、transition 是过渡，是样式值的变化的过程，只有开始和结束；animation 其实也叫关键帧，通过和 keyframe 结合可以设置中间帧的一个状态；<br>　　　　2、animation 配合 @keyframe 可以不触发时间就触发这个过程，而 transition 需要通过 hover 或者 js 事件来配合触发；<br>　　　　3、animation 可以设置很多的属性，比如循环次数，动画结束的状态等等，transition 只能触发一次；<br>　　　　4、animation 可以结合 keyframe 设置每一帧，但是 transition 只有两帧；<br>　　　　5、在性能方面：浏览器有一个主线程和排版线程；主线程一般是对 js 运行的、页面布局、生成位图等等，然后把生成好的位图传递给排版线程，而排版线程会通过 GPU 将位图绘制到页面上，也会向主线程请求位图等等；我们在用使用 aniamtion 的时候这样就可以改变很多属性，像我们改变了 width、height、postion 等等这些改变文档流的属性的时候就会引起，页面的回流和重绘，对性能影响就比较大，但是我们用 transition 的时候一般会结合 tansfrom 来进行旋转和缩放等不会生成新的位图，当然也就不会引起页面的重排了；</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
